# Terragon Autonomous SDLC Value Discovery Configuration
# Repository: sentiment-analyzer-pro (Advanced Maturity: 85%+)
# Last Updated: 2025-08-01
# Configuration: Optimization & Modernization focused

repository:
  name: "sentiment-analyzer-pro"
  maturity_level: "advanced"
  maturity_score: 85
  primary_language: "python"
  framework: "ml-pipeline"
  architecture: "microservices-ready"

# Adaptive scoring weights based on repository maturity level
scoring:
  weights:
    # Advanced repositories prioritize optimization and modernization
    advanced:
      wsjf: 0.5           # Weighted Shortest Job First - strategic prioritization
      ice: 0.1            # Impact-Confidence-Ease - reduced for mature repos
      technicalDebt: 0.3  # High focus on debt reduction in mature codebases
      security: 0.1       # Security maintenance vs initial implementation
      
  # Score thresholds for autonomous execution
  thresholds:
    minScore: 15.0        # Higher bar for advanced repositories
    maxRisk: 0.7          # Lower risk tolerance for mature systems
    securityBoost: 2.0    # Security issues get priority boost
    complianceBoost: 1.8  # Compliance issues prioritized
    performanceBoost: 1.5 # Performance optimization focus
    
  # Business impact multipliers
  impact_multipliers:
    user_facing: 2.0      # User-facing improvements prioritized
    api_breaking: 0.3     # Avoid breaking changes in mature systems
    dependency_update: 0.8 # Dependency updates lower priority unless security
    documentation: 0.6    # Docs important but lower than core functionality
    refactoring: 1.2      # Code quality improvements valued
    performance: 1.8      # Performance optimization high priority

# Continuous value discovery sources
discovery:
  sources:
    # Code analysis sources
    gitHistory: 
      enabled: true
      lookback_days: 90
      exclude_patterns: ["docs/", "*.md"]
      
    staticAnalysis:
      enabled: true
      tools: ["ruff", "bandit", "mypy"]
      frequency: "daily"
      
    issueTrackers:
      enabled: true
      platforms: ["github"]
      include_closed: false
      age_limit_days: 180
      
    vulnerabilityDatabases:
      enabled: true
      sources: ["osv", "github_advisory", "snyk"]
      severity_filter: ["high", "critical"]
      
    performanceMonitoring:
      enabled: true
      metrics: ["response_time", "memory_usage", "cpu_utilization"]
      regression_threshold: 0.05  # 5% performance regression threshold
      
    userFeedback:
      enabled: false  # Not configured for this repository
      
  # Static analysis tool configuration
  tools:
    staticAnalysis:
      ruff:
        config_file: "pyproject.toml"
        severity_filter: ["error", "warning"]
      bandit:
        config_file: ".bandit"
        confidence_level: "medium"
      mypy:
        config_file: "pyproject.toml"
        strict_mode: true
        
    security:
      snyk:
        manifest_files: ["requirements.txt", "pyproject.toml"]
        severity_threshold: "medium"
      dependabot:
        config_file: ".github/dependabot.yml"
        frequency: "weekly"
      trivy:
        scan_types: ["fs", "config"]
        security_checks: ["vuln", "secret", "config"]
        
    performance:
      lighthouse:
        enabled: false  # Not applicable for ML backend
      pytest_benchmark:
        enabled: true
        config_file: "pyproject.toml"

# Autonomous execution configuration
execution:
  maxConcurrentTasks: 1     # Conservative for mature repository
  batchSize: 3              # Process up to 3 related items together
  
  # Quality gates before execution
  preExecutionChecks:
    testSuite: true           # All tests must pass
    linting: true            # Code must pass linting
    securityScan: true       # Security scan must pass
    buildVerification: true  # Build must succeed
    
  # Test requirements for changes
  testRequirements:
    minCoverage: 80          # Maintain 80%+ test coverage
    performanceRegression: 5  # Max 5% performance regression
    securityRegression: false # No security regressions allowed
    
  # Automatic rollback triggers
  rollbackTriggers:
    - testFailure
    - buildFailure  
    - securityViolation
    - performanceRegression
    - dependencyConflict
    
  # Change approval thresholds
  approvalThresholds:
    automatic: 25.0          # Auto-execute items with score >= 25
    humanReview: 15.0        # Human review for scores 15-25
    blocked: 10.0            # Block items with score < 10

# Advanced repository-specific discovery patterns
discovery_patterns:
  # Technical debt indicators in advanced repositories
  technicalDebt:
    - pattern: "TODO.*performance"
      weight: 2.0
      category: "performance_optimization"
    - pattern: "FIXME.*security"
      weight: 3.0
      category: "security_hardening"
    - pattern: "XXX.*deprecated"
      weight: 1.5
      category: "modernization"
    - pattern: "HACK.*workaround"
      weight: 2.5
      category: "technical_debt"
      
  # Modernization opportunities
  modernization:
    - pattern: "python.*3\\.[0-8]"
      weight: 1.8
      category: "python_upgrade"
    - pattern: "tensorflow.*1\\."
      weight: 2.2
      category: "ml_framework_upgrade"
    - pattern: "requirements\\.txt"
      weight: 1.2
      category: "dependency_management_modernization"
      
  # Performance optimization signals
  performance:
    - pattern: "\\bslow\\b.*test"
      weight: 1.5
      category: "test_performance"
    - pattern: "timeout.*increase"
      weight: 2.0
      category: "performance_issue"
    - pattern: "memory.*leak"
      weight: 3.0
      category: "memory_optimization"

# Value tracking and learning configuration
learning:
  # Track execution outcomes for model improvement
  outcomeTracking:
    enabled: true
    metrics: ["actual_effort", "actual_impact", "user_satisfaction"]
    storage: ".terragon/execution_history.json"
    
  # Continuously refine scoring model
  modelRefinement:
    enabled: true
    frequency: "weekly"
    adjustment_factor: 0.1  # Conservative adjustment for stable systems
    confidence_threshold: 0.8
    
  # Pattern recognition for similar tasks
  patternRecognition:
    enabled: true
    similarity_threshold: 0.7
    learning_window_days: 30
    
# Reporting and metrics
reporting:
  # Value delivery metrics
  valueMetrics:
    - name: "technical_debt_reduction"
      unit: "story_points"
      target: 10.0
      frequency: "weekly"
    - name: "security_improvements"
      unit: "vulnerabilities_fixed"
      target: 5.0
      frequency: "monthly"
    - name: "performance_gains"
      unit: "percent_improvement"
      target: 15.0
      frequency: "monthly"
      
  # Operational metrics
  operationalMetrics:
    - name: "autonomous_pr_success_rate"
      target: 0.90
      frequency: "weekly"
    - name: "mean_time_to_value"
      target: 4.0
      unit: "hours"
      frequency: "weekly"
    - name: "rollback_rate"
      target: 0.05
      frequency: "monthly"

# Integration points for advanced repositories
integrations:
  # CI/CD integration
  cicd:
    platform: "github_actions"
    workflow_files: [".github/workflows/python-ci.yml"]
    deployment_branches: ["main"]
    
  # Monitoring integration
  monitoring:
    prometheus:
      enabled: true
      config_file: "monitoring/prometheus.yml"
    otel:
      enabled: true
      config_file: "monitoring/otel-collector.yml"
      
  # Security integration
  security:
    precommit:
      enabled: true
      config_file: ".pre-commit-config.yaml"
    secretScanning:
      enabled: true
      tool: "detect-secrets"
      
# Advanced repository specific configurations
advanced_features:
  # Code modernization priorities
  modernization_priorities:
    - "dependency_security_updates"
    - "python_version_compatibility"
    - "ml_framework_optimization"
    - "container_image_updates"
    - "performance_profiling_integration"
    
  # Architectural improvement opportunities
  architecture_improvements:
    - "microservices_decomposition"
    - "async_processing_optimization"
    - "caching_strategy_enhancement"
    - "api_versioning_strategy"
    - "observability_enhancement"
    
  # Innovation integration points
  innovation_areas:
    - "ai_assisted_code_review"
    - "automated_performance_optimization"
    - "intelligent_test_generation"
    - "predictive_maintenance"
    - "autonomous_dependency_management"