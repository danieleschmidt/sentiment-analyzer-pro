version: '3.8'

services:
  # Main application service
  sentiment-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/models/sentiment_model.joblib
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - sentiment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service
  sentiment-analyzer-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "5001:5000"
      - "5678:5678"  # debugpy port
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app/src
    volumes:
      - .:/app
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - sentiment-network
    profiles:
      - development

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sentiment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL for metadata and user management (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sentiment_db
      POSTGRES_USER: sentiment_user
      POSTGRES_PASSWORD: sentiment_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sentiment-network
    restart: unless-stopped
    profiles:
      - development
      - full
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentiment_user -d sentiment_db"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sentiment-analyzer
    networks:
      - sentiment-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sentiment-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sentiment-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - sentiment-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Model training service (for batch training jobs)
  model-trainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: ml-training
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - sentiment-network
    profiles:
      - training
    command: ["python", "-m", "src.train", "--csv", "/app/data/training_data.csv"]

  # Jupyter notebook for data exploration
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - PYTHONPATH=/app/src
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    networks:
      - sentiment-network
    profiles:
      - development
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  sentiment-network:
    driver: bridge

# Development override examples
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# Production setup
# docker-compose --profile production up -d
# Full development environment
# docker-compose --profile development --profile monitoring up -d