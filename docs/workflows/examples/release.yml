# Release Automation Workflow for Sentiment Analyzer Pro
# This file should be placed at: .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.10"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z (e.g., v1.0.0)"
          exit 1
        fi
        
    - name: Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag -l | grep -q "^${VERSION}$"; then
          echo "Version $VERSION already exists!"
          exit 1
        fi

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[dev,ml,web]
        
    - name: Run full test suite
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-fail-under=80 \
          -v
          
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == env.PYTHON_VERSION
      with:
        name: python-package
        path: dist/

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8080:8080 --name test-release \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        sleep 15
        curl -f http://localhost:8080/ || exit 1
        docker stop test-release

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, docker-release]
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# Release Notes for ${VERSION}" > release-notes.md
        echo "" >> release-notes.md
        
        if [[ -n "$PREV_TAG" ]]; then
          echo "## Changes since ${PREV_TAG}" >> release-notes.md
          echo "" >> release-notes.md
          
          # Get commits since last tag
          git log ${PREV_TAG}..HEAD --oneline --no-merges | while read line; do
            echo "- ${line}" >> release-notes.md
          done
        else
          echo "## Initial Release" >> release-notes.md
          echo "" >> release-notes.md
          echo "This is the first release of Sentiment Analyzer Pro." >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "### PyPI" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "pip install sentiment-analyzer-pro==${VERSION#v}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Docker" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: python-packages
        asset_content_type: application/zip

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, create-release]
    environment: release
    if: github.repository == 'danieleschmidt/sentiment-analyzer-pro'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, docker-release, create-release]
    environment: production
    if: github.repository == 'danieleschmidt/sentiment-analyzer-pro'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.validate-release.outputs.version }} to production..."
        # Add your production deployment commands here
        # Example: kubectl set image deployment/sentiment-analyzer app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add smoke tests for production deployment
        
    - name: Notify deployment
      run: |
        echo "Notifying team of successful production deployment..."
        # Add notification logic (Slack, email, etc.)

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [docker-release]
    
    steps:
    - name: Run Trivy scanner on release image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        format: 'sarif'
        output: 'trivy-release-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-release-results.sarif'

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update documentation
      run: |
        echo "Updating documentation for release ${{ needs.validate-release.outputs.version }}..."
        # Add documentation update commands
        
    - name: Create announcement
      run: |
        echo "Creating release announcement..."
        # Add logic to create announcements (blog post, social media, etc.)
        
    - name: Update project board
      run: |
        echo "Updating project management boards..."
        # Add logic to update project tracking tools