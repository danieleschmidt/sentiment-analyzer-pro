# Security Scanning Workflow for Sentiment Analyzer Pro
# This file should be placed at: .github/workflows/security.yml

name: Security Scanning

on:
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,ml,web]
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -e .[dev,ml,web]
        
    - name: Run Safety scan
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run pip-audit scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret detection
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install detect-secrets
      run: |
        pip install detect-secrets
        
    - name: Run detect-secrets scan
      run: |
        detect-secrets scan --all-files --force-use-all-plugins --baseline .secrets.baseline || true
        
    - name: Verify secrets baseline
      run: |
        detect-secrets audit .secrets.baseline --fail-on-unaudited --fail-on-live || true

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: sentiment-analyzer-pro:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: sentiment-analyzer-pro:security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Docker Bench for Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /etc:/etc:ro --label docker_bench_security \
          docker/docker-bench-security || true

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep ruff mypy
        pip install -e .[dev,ml,web]
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt || true
        
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        
    - name: Run Ruff linting
      run: |
        ruff check src/ tests/ --output-format=json --output-file=ruff-report.json || true
        
    - name: Run MyPy type checking
      run: |
        mypy src/ --strict --ignore-missing-imports --json-report mypy-report || true
        
    - name: Upload static analysis reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-reports
        path: |
          bandit-report.json
          semgrep-report.json
          ruff-report.json
          mypy-report/

  compliance-check:
    name: Compliance Verification
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check license compliance
      run: |
        echo "Checking license compliance..."
        # Add license scanning tools here
        # Example: pip install licensecheck && licensecheck
        
    - name: Check SBOM generation
      run: |
        echo "Generating Software Bill of Materials..."
        # Add SBOM generation here
        # Example: pip install cyclonedx-bom && cyclonedx-py
        
    - name: Verify security policy
      run: |
        echo "Verifying security policy compliance..."
        test -f SECURITY.md || echo "SECURITY.md missing"
        test -f .github/SECURITY.md || echo "GitHub security policy missing"

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, docker-security, static-analysis, compliance-check]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        
        # Add logic to parse reports and create summary
        echo "- CodeQL Analysis: Completed" >> security-summary.md
        echo "- Dependency Scan: Completed" >> security-summary.md
        echo "- Secret Detection: Completed" >> security-summary.md
        echo "- Docker Security: Completed" >> security-summary.md
        echo "- Static Analysis: Completed" >> security-summary.md
        echo "- Compliance Check: Completed" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Security Scan Results\n\n${summary}`
          });